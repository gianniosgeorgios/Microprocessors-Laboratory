
ask3c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000130  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000039  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000182  00000000  00000000  000001dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000106  00000000  00000000  0000035f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000236  00000000  00000000  00000465  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  0000069c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000cf  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000050  00000000  00000000  000007ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000007fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_8>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6f 00 	call	0xde	; 0xde <main>
  64:	0c 94 96 00 	jmp	0x12c	; 0x12c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_2>:
#include <avr/io.h>
#include<avr/interrupt.h>
#include <util/delay.h>

ISR (INT1_vect) 					// Ρουτίνα εξυπηρέτησης διακοπής INT1
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	3f 93       	push	r19
  7a:	8f 93       	push	r24
  7c:	9f 93       	push	r25
  7e:	ef 93       	push	r30
  80:	ff 93       	push	r31
	if((PINB & 0x01)==1) {			// Εαν PB0=1 έχουμε ανανέωση
  82:	b0 9b       	sbis	0x16, 0	; 22
  84:	10 c0       	rjmp	.+32     	; 0xa6 <__vector_2+0x3a>
		TCNT1H=0x85;				// Αρχικοποίσηση TCNT1 για 4sec
  86:	85 e8       	ldi	r24, 0x85	; 133
  88:	8d bd       	out	0x2d, r24	; 45
		TCNT1L=0xEE;
  8a:	8e ee       	ldi	r24, 0xEE	; 238
  8c:	8c bd       	out	0x2c, r24	; 44
		PORTB=0xFF;					// Ανοίγουμε όλα τα PB leds
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	88 bb       	out	0x18, r24	; 24
  92:	88 e8       	ldi	r24, 0x88	; 136
  94:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  96:	28 ec       	ldi	r18, 0xC8	; 200
  98:	30 e0       	ldi	r19, 0x00	; 0
  9a:	f9 01       	movw	r30, r18
  9c:	31 97       	sbiw	r30, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <__vector_2+0x30>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a2:	d9 f7       	brne	.-10     	; 0x9a <__vector_2+0x2e>
  a4:	04 c0       	rjmp	.+8      	; 0xae <__vector_2+0x42>
		_delay_ms(500);				// Καθυστέρηση 0.5sec
		PORTB=0x01;
	}
	else {							// Εάν PB0=0 έχουμε ξεκίνημα
		TCNT1H=0x85;
  a6:	85 e8       	ldi	r24, 0x85	; 133
  a8:	8d bd       	out	0x2d, r24	; 45
		TCNT1L=0xEE;
  aa:	8e ee       	ldi	r24, 0xEE	; 238
  ac:	8c bd       	out	0x2c, r24	; 44
		PORTB=0x01;					// Ανοίγουμε μόνο το PB0
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	88 bb       	out	0x18, r24	; 24
	}
}
  b2:	ff 91       	pop	r31
  b4:	ef 91       	pop	r30
  b6:	9f 91       	pop	r25
  b8:	8f 91       	pop	r24
  ba:	3f 91       	pop	r19
  bc:	2f 91       	pop	r18
  be:	0f 90       	pop	r0
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	0f 90       	pop	r0
  c4:	1f 90       	pop	r1
  c6:	18 95       	reti

000000c8 <__vector_8>:

ISR (TIMER1_OVF_vect)				// Ρουτίνα εξυπηρέτησης διακοπής
{									// υπερχύλισης Timer1
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
	PORTB=0x00;						// Τα σβήνουμε όλα
  d2:	18 ba       	out	0x18, r1	; 24
}
  d4:	0f 90       	pop	r0
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	0f 90       	pop	r0
  da:	1f 90       	pop	r1
  dc:	18 95       	reti

000000de <main>:

void main(void)
{
	DDRB=0xFF;						// Αρχικοποίηση της θύρας B σαν έξοδο
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	87 bb       	out	0x17, r24	; 23
	DDRA=0x00;						// Αρχικοποίηση της θύρας A σαν είσοδο
  e2:	1a ba       	out	0x1a, r1	; 26
	GICR=1<<INT1;					// Ενεργοποίηση εξωτερικής διακοπής INT1:On
  e4:	80 e8       	ldi	r24, 0x80	; 128
  e6:	8b bf       	out	0x3b, r24	; 59
	MCUCR=(1<<ISC11)|(0<<ISC10);	// INT1 Mode: στην κατερχόμενη ακμή
  e8:	88 e0       	ldi	r24, 0x08	; 8
  ea:	85 bf       	out	0x35, r24	; 53
	sei();							// Ενεργοποίηση συνολικά των διακοπών
  ec:	78 94       	sei
	TIMSK=1<<TOIE1;					// Ενεργοποίηση διακοπής υπερχύλισης Timer1
  ee:	84 e0       	ldi	r24, 0x04	; 4
  f0:	89 bf       	out	0x39, r24	; 57
	TCCR1B=(1<<CS12)|(0<<CS11)|(1<<CS10); //CK/1024
  f2:	85 e0       	ldi	r24, 0x05	; 5
  f4:	8e bd       	out	0x2e, r24	; 46
				PORTB=0xFF;				// Ανοίγουμε όλα τα PB leds
				_delay_ms(500);			// Καθυστέρηση 0.5sec
				PORTB=0x01;				// Ανοίγουμε μόνο το PB0
			}
			else {						// Εάν PB0=0 έχουμε ξεκίνημα
				TCNT1H=0x85;			// Αρχικοποίσηση TCNT1 για 4sec
  f6:	65 e8       	ldi	r22, 0x85	; 133
				TCNT1L=0xEE;
  f8:	5e ee       	ldi	r21, 0xEE	; 238
				PORTB=0x01;				// Ανοίγουμε μόνο το PB0
  fa:	41 e0       	ldi	r20, 0x01	; 1
		if((PINA & 0x80)==128) {		// Έλεγχος πατήματος PA0
			while ((PINA & 0x80)==128);	// Έλεγχος επαναφοράς PA0
			if((PINB & 0x01)==1) {		// Εαν PB0=1 έχουμε ανανέωση
				TCNT1H=0x85;			// Αρχικοποίσηση TCNT1 για 4sec
				TCNT1L=0xEE;
				PORTB=0xFF;				// Ανοίγουμε όλα τα PB leds
  fc:	7f ef       	ldi	r23, 0xFF	; 255
  fe:	28 ec       	ldi	r18, 0xC8	; 200
 100:	30 e0       	ldi	r19, 0x00	; 0
	TIMSK=1<<TOIE1;					// Ενεργοποίηση διακοπής υπερχύλισης Timer1
	TCCR1B=(1<<CS12)|(0<<CS11)|(1<<CS10); //CK/1024

	while(1)
	{
		if((PINA & 0x80)==128) {		// Έλεγχος πατήματος PA0
 102:	cf 9b       	sbis	0x19, 7	; 25
 104:	fe cf       	rjmp	.-4      	; 0x102 <main+0x24>
			while ((PINA & 0x80)==128);	// Έλεγχος επαναφοράς PA0
 106:	cf 99       	sbic	0x19, 7	; 25
 108:	fe cf       	rjmp	.-4      	; 0x106 <main+0x28>
			if((PINB & 0x01)==1) {		// Εαν PB0=1 έχουμε ανανέωση
 10a:	b0 9b       	sbis	0x16, 0	; 22
 10c:	0b c0       	rjmp	.+22     	; 0x124 <main+0x46>
				TCNT1H=0x85;			// Αρχικοποίσηση TCNT1 για 4sec
 10e:	6d bd       	out	0x2d, r22	; 45
				TCNT1L=0xEE;
 110:	5c bd       	out	0x2c, r21	; 44
				PORTB=0xFF;				// Ανοίγουμε όλα τα PB leds
 112:	78 bb       	out	0x18, r23	; 24
 114:	88 e8       	ldi	r24, 0x88	; 136
 116:	93 e1       	ldi	r25, 0x13	; 19
 118:	f9 01       	movw	r30, r18
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <main+0x3c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 11e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 120:	d9 f7       	brne	.-10     	; 0x118 <main+0x3a>
 122:	02 c0       	rjmp	.+4      	; 0x128 <main+0x4a>
				_delay_ms(500);			// Καθυστέρηση 0.5sec
				PORTB=0x01;				// Ανοίγουμε μόνο το PB0
			}
			else {						// Εάν PB0=0 έχουμε ξεκίνημα
				TCNT1H=0x85;			// Αρχικοποίσηση TCNT1 για 4sec
 124:	6d bd       	out	0x2d, r22	; 45
				TCNT1L=0xEE;
 126:	5c bd       	out	0x2c, r21	; 44
				PORTB=0x01;				// Ανοίγουμε μόνο το PB0
 128:	48 bb       	out	0x18, r20	; 24
 12a:	eb cf       	rjmp	.-42     	; 0x102 <main+0x24>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
