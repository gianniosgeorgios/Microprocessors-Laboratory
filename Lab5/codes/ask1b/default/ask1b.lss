
ask1b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000168  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000168  000001dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000069  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002c9  00000000  00000000  0000027b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001ab  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002a7  00000000  00000000  000006ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  00000998  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000128  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000108  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e6       	ldi	r30, 0x68	; 104
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  7a:	0c 94 b2 00 	jmp	0x164	; 0x164 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <usart_init>:
	}
}


void usart_init(void){
 UBRRH=0x00;
  82:	10 bc       	out	0x20, r1	; 32
 UBRRL=51;
  84:	83 e3       	ldi	r24, 0x33	; 51
  86:	89 b9       	out	0x09, r24	; 9
 UCSRA=0x00;
  88:	1b b8       	out	0x0b, r1	; 11
 UCSRB=(1<<RXEN) | (1<<TXEN);
  8a:	88 e1       	ldi	r24, 0x18	; 24
  8c:	8a b9       	out	0x0a, r24	; 10
 UCSRC=(1 << URSEL) | (3 << UCSZ0);
  8e:	86 e8       	ldi	r24, 0x86	; 134
  90:	80 bd       	out	0x20, r24	; 32
}
  92:	08 95       	ret

00000094 <usart_transmit>:

void usart_transmit(char x){
 while ((UCSRA & 0x20)==0);
  94:	5d 9b       	sbis	0x0b, 5	; 11
  96:	fe cf       	rjmp	.-4      	; 0x94 <usart_transmit>
 UDR=x;
  98:	8c b9       	out	0x0c, r24	; 12
}
  9a:	08 95       	ret

0000009c <usart_receive>:

char usart_receive(void){
 while ((UCSRA & 0x80)==0);
  9c:	5f 9b       	sbis	0x0b, 7	; 11
  9e:	fe cf       	rjmp	.-4      	; 0x9c <usart_receive>
 return UDR;
  a0:	8c b1       	in	r24, 0x0c	; 12

}
  a2:	08 95       	ret

000000a4 <usart_transmit_string>:

void usart_transmit_string (char *message){
  a4:	fc 01       	movw	r30, r24
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <usart_transmit_string+0xc>
 UCSRB=(1<<RXEN) | (1<<TXEN);
 UCSRC=(1 << URSEL) | (3 << UCSZ0);
}

void usart_transmit(char x){
 while ((UCSRA & 0x20)==0);
  a8:	5d 9b       	sbis	0x0b, 5	; 11
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <usart_transmit_string+0x4>
 UDR=x;
  ac:	8c b9       	out	0x0c, r24	; 12
  ae:	31 96       	adiw	r30, 0x01	; 1

}

void usart_transmit_string (char *message){
 int i=0;
 while (message[i]!='\0'){
  b0:	80 81       	ld	r24, Z
  b2:	88 23       	and	r24, r24
  b4:	c9 f7       	brne	.-14     	; 0xa8 <usart_transmit_string+0x4>
 	usart_transmit(message[i]);
	i++;
 }
}
  b6:	08 95       	ret

000000b8 <main>:
void usart_transmit(char);
char usart_receive(void);
void usart_transmit_string (char *);

void main(void)
{
  b8:	df 92       	push	r13
  ba:	ef 92       	push	r14
  bc:	ff 92       	push	r15
  be:	0f 93       	push	r16
  c0:	1f 93       	push	r17
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
	SP = RAMEND;
  c6:	8f e5       	ldi	r24, 0x5F	; 95
  c8:	94 e0       	ldi	r25, 0x04	; 4
  ca:	9e bf       	out	0x3e, r25	; 62
  cc:	8d bf       	out	0x3d, r24	; 61
	char c;
	char *read="Read ";
	char *invalid="Invalid Number\n";
	DDRB=0xFF; // Initiating PORT B as output
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	87 bb       	out	0x17, r24	; 23
	}
}


void usart_init(void){
 UBRRH=0x00;
  d2:	10 bc       	out	0x20, r1	; 32
 UBRRL=51;
  d4:	83 e3       	ldi	r24, 0x33	; 51
  d6:	89 b9       	out	0x09, r24	; 9
 UCSRA=0x00;
  d8:	1b b8       	out	0x0b, r1	; 11
 UCSRB=(1<<RXEN) | (1<<TXEN);
  da:	88 e1       	ldi	r24, 0x18	; 24
  dc:	8a b9       	out	0x0a, r24	; 10
 UCSRC=(1 << URSEL) | (3 << UCSZ0);
  de:	86 e8       	ldi	r24, 0x86	; 134
  e0:	80 bd       	out	0x20, r24	; 32
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e2:	c8 ec       	ldi	r28, 0xC8	; 200
  e4:	d0 e0       	ldi	r29, 0x00	; 0
}

void usart_transmit(char x){
 while ((UCSRA & 0x20)==0);
 UDR=x;
  e6:	9a e0       	ldi	r25, 0x0A	; 10
  e8:	d9 2e       	mov	r13, r25
  	    	usart_transmit('\n');
			if(c=='0') PORTB=0x00;
			else {
				c=c-0x30;
				c=c-1;
				PORTB=0x01<<c;
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	e8 2e       	mov	r14, r24
  ee:	f1 2c       	mov	r15, r1
 while ((UCSRA & 0x20)==0);
 UDR=x;
}

char usart_receive(void){
 while ((UCSRA & 0x80)==0);
  f0:	5f 9b       	sbis	0x0b, 7	; 11
  f2:	fe cf       	rjmp	.-4      	; 0xf0 <main+0x38>
 return UDR;
  f4:	0c b1       	in	r16, 0x0c	; 12
  f6:	88 ee       	ldi	r24, 0xE8	; 232
  f8:	93 e0       	ldi	r25, 0x03	; 3
  fa:	fe 01       	movw	r30, r28
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <main+0x44>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 100:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 102:	d9 f7       	brne	.-10     	; 0xfa <main+0x42>
	usart_init();

	while(1){
		c=usart_receive();
		_delay_ms(100);
		if(c>='0' && c<='8'){
 104:	10 2f       	mov	r17, r16
 106:	10 53       	subi	r17, 0x30	; 48
 108:	19 30       	cpi	r17, 0x09	; 9
 10a:	f0 f4       	brcc	.+60     	; 0x148 <main+0x90>
			usart_transmit_string(read);
 10c:	80 e6       	ldi	r24, 0x60	; 96
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 52 00 	call	0xa4	; 0xa4 <usart_transmit_string>
 UCSRB=(1<<RXEN) | (1<<TXEN);
 UCSRC=(1 << URSEL) | (3 << UCSZ0);
}

void usart_transmit(char x){
 while ((UCSRA & 0x20)==0);
 114:	5d 9b       	sbis	0x0b, 5	; 11
 116:	fe cf       	rjmp	.-4      	; 0x114 <main+0x5c>
 UDR=x;
 118:	0c b9       	out	0x0c, r16	; 12
 UCSRB=(1<<RXEN) | (1<<TXEN);
 UCSRC=(1 << URSEL) | (3 << UCSZ0);
}

void usart_transmit(char x){
 while ((UCSRA & 0x20)==0);
 11a:	5d 9b       	sbis	0x0b, 5	; 11
 11c:	fe cf       	rjmp	.-4      	; 0x11a <main+0x62>
 UDR=x;
 11e:	dc b8       	out	0x0c, r13	; 12
		_delay_ms(100);
		if(c>='0' && c<='8'){
			usart_transmit_string(read);
			usart_transmit(c);
  	    	usart_transmit('\n');
			if(c=='0') PORTB=0x00;
 120:	00 33       	cpi	r16, 0x30	; 48
 122:	11 f4       	brne	.+4      	; 0x128 <main+0x70>
 124:	18 ba       	out	0x18, r1	; 24
 126:	08 c0       	rjmp	.+16     	; 0x138 <main+0x80>
			else {
				c=c-0x30;
				c=c-1;
				PORTB=0x01<<c;
 128:	11 50       	subi	r17, 0x01	; 1
 12a:	c7 01       	movw	r24, r14
 12c:	02 c0       	rjmp	.+4      	; 0x132 <main+0x7a>
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	1a 95       	dec	r17
 134:	e2 f7       	brpl	.-8      	; 0x12e <main+0x76>
 136:	88 bb       	out	0x18, r24	; 24
 138:	88 ee       	ldi	r24, 0xE8	; 232
 13a:	93 e0       	ldi	r25, 0x03	; 3
 13c:	fe 01       	movw	r30, r28
 13e:	31 97       	sbiw	r30, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <main+0x86>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 142:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 144:	d9 f7       	brne	.-10     	; 0x13c <main+0x84>
 146:	d4 cf       	rjmp	.-88     	; 0xf0 <main+0x38>
			}
			_delay_ms(100);
		}
		else if(c!='\n') {
 148:	0a 30       	cpi	r16, 0x0A	; 10
 14a:	91 f2       	breq	.-92     	; 0xf0 <main+0x38>
			usart_transmit_string(invalid);
 14c:	86 e6       	ldi	r24, 0x66	; 102
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 52 00 	call	0xa4	; 0xa4 <usart_transmit_string>
 154:	88 ee       	ldi	r24, 0xE8	; 232
 156:	93 e0       	ldi	r25, 0x03	; 3
 158:	fe 01       	movw	r30, r28
 15a:	31 97       	sbiw	r30, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <main+0xa2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 15e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 160:	d9 f7       	brne	.-10     	; 0x158 <main+0xa0>
 162:	c6 cf       	rjmp	.-116    	; 0xf0 <main+0x38>

00000164 <_exit>:
 164:	f8 94       	cli

00000166 <__stop_program>:
 166:	ff cf       	rjmp	.-2      	; 0x166 <__stop_program>
